#!/usr/bin/expect
# White Rabbit Pattern Generator
# take an STL from stdin, configure the times on the GPG, the states on the DIO FFIFO


set DS 6
set GBIT	0x01
set HITIME	10
set eof_sent	0

if { $::argc > 0 } {
	foreach arg $::argv {
		set DS $::argv
		break
	}
}

puts "DS $DS"

array set gpg_stl {}
array set d32_stl {}

set ii 0
while { [gets stdin line] >= 0 } {
	incr ii
	if { [string match "EOF" $line] } {
		set eof_sent 1
		break
	} elseif { [string length $line] < 3 } {
		continue
	} elseif { [string match "#*" $line] } {
		continue
	} elseif { [scan $line "%d,%x" usecs state] != 2 } {
		puts "STL ERROR at line $ii $line"
	} else {
#		puts [format "GOOD %d %x" $usecs $state]
		set gpg_stl($usecs) $GBIT
		set d32_stl([expr $ii - 1]) $state
	}
}

set ::env(STL2RAW_NOFILL) 1
set D32_FFIFO	[format "/dev/acq400.%d.awg" $DS]
set ffifo [open |[list stl2raw $D32_FFIFO] w]
puts "d32_stl output to $D32_FFIFO $ffifo"
foreach timeat [lsort -integer [array names d32_stl]] {
	puts $ffifo [format "%d,%08x" $timeat $d32_stl($timeat)]
#	puts [format "%d,%08x" $timeat $d32_stl($timeat)]
}
close $ffifo


exec /usr/local/CARE/WRPG/prime_FIFO $DS

# Clear GPG Enable
exec set.site 0 gpg_enable 0

set GPG /dev/acq400.0.gpg
set gpgf [open |[list stl2gpg $GPG] w]
puts "gpg_stl $GPG $gpgf"
foreach timeat [lsort -integer [array names gpg_stl]] {
	puts $gpgf [format "%d,%02x" $timeat $gpg_stl($timeat)]
	puts $gpgf [format "%d,%02x" [expr $timeat + $HITIME] 0]
}
puts $gpgf "EOF"
#close $gpgf 

# Set GPG to ONESHOT and Enable GPG
exec set.site 0 gpg_mode 0
exec set.site 0 gpg_enable 1

if { $eof_sent } {
	puts "QUIT on EOF"
}

